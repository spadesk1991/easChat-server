package main

import (
	"fmt"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	socketio "github.com/googollee/go-socket.io"
	"github.com/gorilla/websocket"
	"github.com/spadesk1991/easChat-server/controllers"
	"github.com/spadesk1991/easChat-server/docs" // docs is generated by Swag CLI, you have to import it.
	swaggerFiles "github.com/swaggo/files"       // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger"   // gin-swagger middleware
	"gopkg.in/mgo.v2/bson"
)

var (
	clientMap = make(map[bson.ObjectId]*websocket.Conn)
)

// @contact.name API Support
// @contact.url http://localhost:8080
// @contact.email spadesk1991@gmail.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @termsOfService http://swagger.io/terms/
func main() {
	// programatically set swagger info
	docs.SwaggerInfo.Title = "Swagger Example API"
	docs.SwaggerInfo.Description = "This is a sample server Petstore server."
	docs.SwaggerInfo.Version = "2.0"
	docs.SwaggerInfo.Host = "petstore.swagger.io"
	docs.SwaggerInfo.BasePath = "/v2"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}
	r := gin.Default()
	server, err := socketio.NewServer(nil)
	if err != nil {
		log.Fatal(err)
	}
	server.OnConnect("/", func(s socketio.Conn) error {
		s.SetContext("")
		fmt.Println("connected:", s.ID())
		return nil
	})
	server.OnEvent("/", "notice", func(s socketio.Conn, msg string) {
		fmt.Println("notice:", msg)
		s.Emit("reply", "have "+msg)
	})
	server.OnEvent("/", "msg", func(s socketio.Conn, msg string) {
		s.SetContext(msg)
		fmt.Println(msg)
		s.Emit("msg", msg)
	})
	server.OnEvent("/", "bye", func(s socketio.Conn) {
		last := s.Context().(string)
		s.Emit("bye", last)
		s.Close()
	})
	server.OnError("/", func(e error) {
		fmt.Println("meet error:", e)
	})
	server.OnDisconnect("/", func(s socketio.Conn, msg string) {
		fmt.Println("closed", msg)
	})
	go server.Serve()
	defer server.Close()
	r.GET("/", gin.WrapH(server))
	r.POST("/", gin.WrapH(server))
	r.Handle("WS", "/", gin.WrapH(server))
	r.Handle("WSS", "/", gin.WrapH(server))

	r.POST("/register", controllers.Register)
	r.POST("/login", controllers.Login)
	r.GET("/user", controllers.GetUser)
	r.GET("/users", controllers.GetUsers)
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	fmt.Printf(" Swagger 2.0 Api documents: http://localhost:8080/swagger/index.html\n")
	r.Run()
}

type Message struct {
	Sender    bson.ObjectId `json:"sender"`
	Recipient bson.ObjectId `json:"recipient"`
	Content   string        `json:"content"`
}

func wsPage(ctx *gin.Context) {
	conn, err := (&websocket.Upgrader{CheckOrigin: func(r *http.Request) bool { return true }}).Upgrade(ctx.Writer, ctx.Request, nil)
	if err != nil {
		log.Fatalln(err)
		return
	}
	id := ctx.Param("id")
	if id == "" {
		return
	}
	clientMap[bson.ObjectIdHex(id)] = conn
	for {
		jsonMsg := Message{}
		err := conn.ReadJSON(&jsonMsg)
		// messageType, p, err := conn.ReadMessage()
		if err != nil {
			log.Println(err)
			return
		}

		// json.Unmarshal(p, jsonMsg)
		recipConn := clientMap[jsonMsg.Recipient]
		jsonMsg.Sender, jsonMsg.Recipient = jsonMsg.Recipient, jsonMsg.Sender
		if recipConn != nil {
			if err := recipConn.WriteJSON(jsonMsg); err != nil {
				log.Println(err)
				return
			}

		}
	}
}
